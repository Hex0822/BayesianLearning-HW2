---
title: "Assignment2"
author: "Tianyi Zhang"
format: html
---

## Problem 5

### Problem 5a)

```{r}
data = read.csv("https://github.com/mattiasvillani/BayesLearnCourse/raw/master/assignment/bugs.csv", 
                header = TRUE)
y = data$nBugs # response variable: the number of bugs, a vector with n = 91 observations
X = data[,-1]  # 91 x 5 matrix with covariates
X = as.matrix(X) # X was initially a data frame, but we want it to be matrix
```


```{r}
library(mvtnorm)
tau_sq = 100

logPostPois = function(beta,X,y,tau_sq){
  Prior = dmvnorm(beta,mean=rep(0,length(beta)),sigma = tau_sq*diag(length(beta)),log = TRUE)
  #Likelihood = sum(y*X%*%beta-exp(X%*%beta)-lgamma(y+1))
  loglike = sum(dpois(y,lambda = exp(X%*%beta),log=TRUE))
  Posterior = Prior+loglike
  return(Posterior)
}

# optim finds the minimum by default
# fnsclae=-1 means we are doing maximum
opt = optim(par = rep(0,5),
            fn=logPostPois,
            gr = NULL,
            X=X,y=y,tau_sq=tau_sq,
            method = "BFGS",
            control= list(fnscale=-1),
            hessian=TRUE)

mu_posterior = opt$par
names(mu_posterior)=c('intercept','nCommit','propC','propJava','complexity')
Sigma_posterior = solve(-opt$hessian)

mu_posterior

Sigma_posterior

```


### Problem 5b)

```{r}
library(MASS)
n_sample = 20000
names(mu_posterior)=c('intercept','nCommit','propC','propJava','complexity')
sample = MASS::mvrnorm(n_sample, mu = mu_posterior,Sigma = Sigma_posterior)

par(mfrow=c(2,3))

significant_review = vector(mode = "logical",ncol(sample))
names(significant_review)=c('intercept','nCommit','propC','propJava','complexity')
for (i in 1:ncol(sample)){
  param_name = colnames(sample)[i]
  param_sample = sample[,i]

  hist(param_sample,
    main = paste("Marginal Posterior of ", param_name),
    xlab = 'Parameter Value',
    col = "blue")

  credible_interval = quantile(param_sample,probs = c(0.025,0.975))
  abline(v = credible_interval, col = 'red', lty=2,lwd=2)
  abline(v=0, col = 'green',lty=1,lwd=2)
  #legend("topright",legend=c("95% CI","Zero Line"),col=c("red","green"),lty=c(2,1),bty="n")

  is_significant = (credible_interval[1]>0)|(credible_interval[2]<0)
  significant_review[i] <- is_significant
}

significant_review


```
